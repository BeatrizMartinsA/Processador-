// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/17/2020 15:49:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] endereco_entrada;
// wires                                               
wire [31:0] saida;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.endereco_entrada(endereco_entrada),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 
// endereco_entrada[ 31 ]
initial
begin
	endereco_entrada[31] = 1'b0;
end 
// endereco_entrada[ 30 ]
initial
begin
	endereco_entrada[30] = 1'b0;
end 
// endereco_entrada[ 29 ]
initial
begin
	endereco_entrada[29] = 1'b0;
end 
// endereco_entrada[ 28 ]
initial
begin
	endereco_entrada[28] = 1'b0;
end 
// endereco_entrada[ 27 ]
initial
begin
	endereco_entrada[27] = 1'b0;
end 
// endereco_entrada[ 26 ]
initial
begin
	endereco_entrada[26] = 1'b0;
end 
// endereco_entrada[ 25 ]
initial
begin
	endereco_entrada[25] = 1'b0;
end 
// endereco_entrada[ 24 ]
initial
begin
	endereco_entrada[24] = 1'b0;
end 
// endereco_entrada[ 23 ]
initial
begin
	endereco_entrada[23] = 1'b0;
end 
// endereco_entrada[ 22 ]
initial
begin
	endereco_entrada[22] = 1'b0;
end 
// endereco_entrada[ 21 ]
initial
begin
	endereco_entrada[21] = 1'b0;
end 
// endereco_entrada[ 20 ]
initial
begin
	endereco_entrada[20] = 1'b0;
end 
// endereco_entrada[ 19 ]
initial
begin
	endereco_entrada[19] = 1'b0;
end 
// endereco_entrada[ 18 ]
initial
begin
	endereco_entrada[18] = 1'b0;
end 
// endereco_entrada[ 17 ]
initial
begin
	endereco_entrada[17] = 1'b0;
end 
// endereco_entrada[ 16 ]
initial
begin
	endereco_entrada[16] = 1'b0;
end 
// endereco_entrada[ 15 ]
initial
begin
	endereco_entrada[15] = 1'b0;
end 
// endereco_entrada[ 14 ]
initial
begin
	endereco_entrada[14] = 1'b0;
end 
// endereco_entrada[ 13 ]
initial
begin
	endereco_entrada[13] = 1'b0;
end 
// endereco_entrada[ 12 ]
initial
begin
	endereco_entrada[12] = 1'b0;
end 
// endereco_entrada[ 11 ]
initial
begin
	endereco_entrada[11] = 1'b0;
end 
// endereco_entrada[ 10 ]
initial
begin
	endereco_entrada[10] = 1'b0;
end 
// endereco_entrada[ 9 ]
initial
begin
	endereco_entrada[9] = 1'b0;
end 
// endereco_entrada[ 8 ]
initial
begin
	endereco_entrada[8] = 1'b0;
end 
// endereco_entrada[ 7 ]
initial
begin
	endereco_entrada[7] = 1'b0;
end 
// endereco_entrada[ 6 ]
initial
begin
	endereco_entrada[6] = 1'b0;
end 
// endereco_entrada[ 5 ]
initial
begin
	endereco_entrada[5] = 1'b0;
end 
// endereco_entrada[ 4 ]
initial
begin
	endereco_entrada[4] = 1'b0;
end 
// endereco_entrada[ 3 ]
initial
begin
	endereco_entrada[3] = 1'b0;
end 
// endereco_entrada[ 2 ]
initial
begin
	endereco_entrada[2] = 1'b0;
	endereco_entrada[2] = #280000 1'b1;
	endereco_entrada[2] = #240000 1'b0;
end 
// endereco_entrada[ 1 ]
initial
begin
	endereco_entrada[1] = 1'b0;
	endereco_entrada[1] = #180000 1'b1;
	endereco_entrada[1] = #100000 1'b0;
end 
// endereco_entrada[ 0 ]
initial
begin
	endereco_entrada[0] = 1'b0;
	endereco_entrada[0] = #80000 1'b1;
	endereco_entrada[0] = #100000 1'b0;
	endereco_entrada[0] = #240000 1'b1;
	endereco_entrada[0] = #100000 1'b0;
end 
endmodule

