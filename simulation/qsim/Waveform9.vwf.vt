// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/17/2020 18:18:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          add
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module add_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] entrada1;
reg [31:0] entrada2;
// wires                                               
wire [31:0] saida;

// assign statements (if any)                          
add i1 (
// port map - connection between master ports and signals/registers   
	.entrada1(entrada1),
	.entrada2(entrada2),
	.saida(saida)
);
initial 
begin 
#1000000 $stop;
end 
// entrada1[ 31 ]
initial
begin
	entrada1[31] = 1'b0;
end 
// entrada1[ 30 ]
initial
begin
	entrada1[30] = 1'b0;
end 
// entrada1[ 29 ]
initial
begin
	entrada1[29] = 1'b0;
end 
// entrada1[ 28 ]
initial
begin
	entrada1[28] = 1'b0;
end 
// entrada1[ 27 ]
initial
begin
	entrada1[27] = 1'b0;
end 
// entrada1[ 26 ]
initial
begin
	entrada1[26] = 1'b0;
end 
// entrada1[ 25 ]
initial
begin
	entrada1[25] = 1'b0;
end 
// entrada1[ 24 ]
initial
begin
	entrada1[24] = 1'b0;
end 
// entrada1[ 23 ]
initial
begin
	entrada1[23] = 1'b0;
end 
// entrada1[ 22 ]
initial
begin
	entrada1[22] = 1'b0;
end 
// entrada1[ 21 ]
initial
begin
	entrada1[21] = 1'b0;
end 
// entrada1[ 20 ]
initial
begin
	entrada1[20] = 1'b0;
end 
// entrada1[ 19 ]
initial
begin
	entrada1[19] = 1'b0;
end 
// entrada1[ 18 ]
initial
begin
	entrada1[18] = 1'b0;
end 
// entrada1[ 17 ]
initial
begin
	entrada1[17] = 1'b0;
end 
// entrada1[ 16 ]
initial
begin
	entrada1[16] = 1'b0;
end 
// entrada1[ 15 ]
initial
begin
	entrada1[15] = 1'b0;
end 
// entrada1[ 14 ]
initial
begin
	entrada1[14] = 1'b0;
end 
// entrada1[ 13 ]
initial
begin
	entrada1[13] = 1'b0;
end 
// entrada1[ 12 ]
initial
begin
	entrada1[12] = 1'b0;
end 
// entrada1[ 11 ]
initial
begin
	entrada1[11] = 1'b0;
end 
// entrada1[ 10 ]
initial
begin
	entrada1[10] = 1'b0;
end 
// entrada1[ 9 ]
initial
begin
	entrada1[9] = 1'b0;
end 
// entrada1[ 8 ]
initial
begin
	entrada1[8] = 1'b0;
end 
// entrada1[ 7 ]
initial
begin
	entrada1[7] = 1'b0;
end 
// entrada1[ 6 ]
initial
begin
	entrada1[6] = 1'b0;
end 
// entrada1[ 5 ]
initial
begin
	entrada1[5] = 1'b0;
end 
// entrada1[ 4 ]
initial
begin
	entrada1[4] = 1'b0;
	entrada1[4] = #680000 1'b1;
	entrada1[4] = #200000 1'b0;
end 
// entrada1[ 3 ]
initial
begin
	entrada1[3] = 1'b0;
	entrada1[3] = #680000 1'b1;
	entrada1[3] = #200000 1'b0;
end 
// entrada1[ 2 ]
initial
begin
	entrada1[2] = 1'b0;
	entrada1[2] = #680000 1'b1;
	entrada1[2] = #200000 1'b0;
end 
// entrada1[ 1 ]
initial
begin
	entrada1[1] = 1'b0;
	entrada1[1] = #420000 1'b1;
	entrada1[1] = #160000 1'b0;
	entrada1[1] = #100000 1'b1;
	entrada1[1] = #200000 1'b0;
end 
// entrada1[ 0 ]
initial
begin
	entrada1[0] = 1'b0;
	entrada1[0] = #60000 1'b1;
	entrada1[0] = #140000 1'b0;
end 
// entrada2[ 31 ]
initial
begin
	entrada2[31] = 1'b0;
end 
// entrada2[ 30 ]
initial
begin
	entrada2[30] = 1'b0;
end 
// entrada2[ 29 ]
initial
begin
	entrada2[29] = 1'b0;
end 
// entrada2[ 28 ]
initial
begin
	entrada2[28] = 1'b0;
end 
// entrada2[ 27 ]
initial
begin
	entrada2[27] = 1'b0;
end 
// entrada2[ 26 ]
initial
begin
	entrada2[26] = 1'b0;
end 
// entrada2[ 25 ]
initial
begin
	entrada2[25] = 1'b0;
end 
// entrada2[ 24 ]
initial
begin
	entrada2[24] = 1'b0;
end 
// entrada2[ 23 ]
initial
begin
	entrada2[23] = 1'b0;
end 
// entrada2[ 22 ]
initial
begin
	entrada2[22] = 1'b0;
end 
// entrada2[ 21 ]
initial
begin
	entrada2[21] = 1'b0;
end 
// entrada2[ 20 ]
initial
begin
	entrada2[20] = 1'b0;
end 
// entrada2[ 19 ]
initial
begin
	entrada2[19] = 1'b0;
end 
// entrada2[ 18 ]
initial
begin
	entrada2[18] = 1'b0;
end 
// entrada2[ 17 ]
initial
begin
	entrada2[17] = 1'b0;
end 
// entrada2[ 16 ]
initial
begin
	entrada2[16] = 1'b0;
end 
// entrada2[ 15 ]
initial
begin
	entrada2[15] = 1'b0;
end 
// entrada2[ 14 ]
initial
begin
	entrada2[14] = 1'b0;
end 
// entrada2[ 13 ]
initial
begin
	entrada2[13] = 1'b0;
end 
// entrada2[ 12 ]
initial
begin
	entrada2[12] = 1'b0;
end 
// entrada2[ 11 ]
initial
begin
	entrada2[11] = 1'b0;
end 
// entrada2[ 10 ]
initial
begin
	entrada2[10] = 1'b0;
end 
// entrada2[ 9 ]
initial
begin
	entrada2[9] = 1'b0;
end 
// entrada2[ 8 ]
initial
begin
	entrada2[8] = 1'b0;
end 
// entrada2[ 7 ]
initial
begin
	entrada2[7] = 1'b0;
end 
// entrada2[ 6 ]
initial
begin
	entrada2[6] = 1'b0;
end 
// entrada2[ 5 ]
initial
begin
	entrada2[5] = 1'b0;
	entrada2[5] = #780000 1'b1;
	entrada2[5] = #160000 1'b0;
end 
// entrada2[ 4 ]
initial
begin
	entrada2[4] = 1'b0;
end 
// entrada2[ 3 ]
initial
begin
	entrada2[3] = 1'b0;
	entrada2[3] = #160000 1'b1;
	entrada2[3] = #140000 1'b0;
	entrada2[3] = #480000 1'b1;
	entrada2[3] = #160000 1'b0;
end 
// entrada2[ 2 ]
initial
begin
	entrada2[2] = 1'b0;
	entrada2[2] = #160000 1'b1;
	entrada2[2] = #140000 1'b0;
end 
// entrada2[ 1 ]
initial
begin
	entrada2[1] = 1'b0;
	entrada2[1] = #160000 1'b1;
	entrada2[1] = #140000 1'b0;
end 
// entrada2[ 0 ]
initial
begin
	entrada2[0] = 1'b0;
	entrada2[0] = #160000 1'b1;
	entrada2[0] = #140000 1'b0;
	entrada2[0] = #160000 1'b1;
	entrada2[0] = #100000 1'b0;
end 
endmodule

