// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/23/2020 17:23:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_escrita
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_escrita_vlg_vec_tst();
// constants                                           
// general purpose registers
reg MemtoReg;
reg [31:0] Resultado_ULA;
reg [31:0] dado_leitura;
// wires                                               
wire [31:0] saida;

// assign statements (if any)                          
mux_escrita i1 (
// port map - connection between master ports and signals/registers   
	.MemtoReg(MemtoReg),
	.Resultado_ULA(Resultado_ULA),
	.dado_leitura(dado_leitura),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// MemtoReg
initial
begin
	MemtoReg = 1'b0;
	MemtoReg = #440000 1'b1;
	MemtoReg = #460000 1'b0;
end 
// Resultado_ULA[ 31 ]
initial
begin
	Resultado_ULA[31] = 1'b0;
end 
// Resultado_ULA[ 30 ]
initial
begin
	Resultado_ULA[30] = 1'b0;
end 
// Resultado_ULA[ 29 ]
initial
begin
	Resultado_ULA[29] = 1'b0;
end 
// Resultado_ULA[ 28 ]
initial
begin
	Resultado_ULA[28] = 1'b0;
end 
// Resultado_ULA[ 27 ]
initial
begin
	Resultado_ULA[27] = 1'b0;
end 
// Resultado_ULA[ 26 ]
initial
begin
	Resultado_ULA[26] = 1'b0;
end 
// Resultado_ULA[ 25 ]
initial
begin
	Resultado_ULA[25] = 1'b0;
end 
// Resultado_ULA[ 24 ]
initial
begin
	Resultado_ULA[24] = 1'b0;
end 
// Resultado_ULA[ 23 ]
initial
begin
	Resultado_ULA[23] = 1'b0;
end 
// Resultado_ULA[ 22 ]
initial
begin
	Resultado_ULA[22] = 1'b0;
end 
// Resultado_ULA[ 21 ]
initial
begin
	Resultado_ULA[21] = 1'b0;
end 
// Resultado_ULA[ 20 ]
initial
begin
	Resultado_ULA[20] = 1'b0;
end 
// Resultado_ULA[ 19 ]
initial
begin
	Resultado_ULA[19] = 1'b0;
end 
// Resultado_ULA[ 18 ]
initial
begin
	Resultado_ULA[18] = 1'b0;
end 
// Resultado_ULA[ 17 ]
initial
begin
	Resultado_ULA[17] = 1'b0;
end 
// Resultado_ULA[ 16 ]
initial
begin
	Resultado_ULA[16] = 1'b0;
end 
// Resultado_ULA[ 15 ]
initial
begin
	Resultado_ULA[15] = 1'b0;
end 
// Resultado_ULA[ 14 ]
initial
begin
	Resultado_ULA[14] = 1'b0;
end 
// Resultado_ULA[ 13 ]
initial
begin
	Resultado_ULA[13] = 1'b0;
end 
// Resultado_ULA[ 12 ]
initial
begin
	Resultado_ULA[12] = 1'b0;
end 
// Resultado_ULA[ 11 ]
initial
begin
	Resultado_ULA[11] = 1'b0;
end 
// Resultado_ULA[ 10 ]
initial
begin
	Resultado_ULA[10] = 1'b0;
end 
// Resultado_ULA[ 9 ]
initial
begin
	Resultado_ULA[9] = 1'b0;
end 
// Resultado_ULA[ 8 ]
initial
begin
	Resultado_ULA[8] = 1'b0;
end 
// Resultado_ULA[ 7 ]
initial
begin
	Resultado_ULA[7] = 1'b0;
end 
// Resultado_ULA[ 6 ]
initial
begin
	Resultado_ULA[6] = 1'b0;
end 
// Resultado_ULA[ 5 ]
initial
begin
	Resultado_ULA[5] = 1'b0;
end 
// Resultado_ULA[ 4 ]
initial
begin
	Resultado_ULA[4] = 1'b0;
end 
// Resultado_ULA[ 3 ]
initial
begin
	Resultado_ULA[3] = 1'b0;
end 
// Resultado_ULA[ 2 ]
initial
begin
	Resultado_ULA[2] = 1'b1;
end 
// Resultado_ULA[ 1 ]
initial
begin
	Resultado_ULA[1] = 1'b0;
end 
// Resultado_ULA[ 0 ]
initial
begin
	Resultado_ULA[0] = 1'b0;
end 
// dado_leitura[ 31 ]
initial
begin
	dado_leitura[31] = 1'b1;
end 
// dado_leitura[ 30 ]
initial
begin
	dado_leitura[30] = 1'b1;
end 
// dado_leitura[ 29 ]
initial
begin
	dado_leitura[29] = 1'b1;
end 
// dado_leitura[ 28 ]
initial
begin
	dado_leitura[28] = 1'b1;
end 
// dado_leitura[ 27 ]
initial
begin
	dado_leitura[27] = 1'b1;
end 
// dado_leitura[ 26 ]
initial
begin
	dado_leitura[26] = 1'b1;
end 
// dado_leitura[ 25 ]
initial
begin
	dado_leitura[25] = 1'b1;
end 
// dado_leitura[ 24 ]
initial
begin
	dado_leitura[24] = 1'b1;
end 
// dado_leitura[ 23 ]
initial
begin
	dado_leitura[23] = 1'b1;
end 
// dado_leitura[ 22 ]
initial
begin
	dado_leitura[22] = 1'b1;
end 
// dado_leitura[ 21 ]
initial
begin
	dado_leitura[21] = 1'b1;
end 
// dado_leitura[ 20 ]
initial
begin
	dado_leitura[20] = 1'b1;
end 
// dado_leitura[ 19 ]
initial
begin
	dado_leitura[19] = 1'b1;
end 
// dado_leitura[ 18 ]
initial
begin
	dado_leitura[18] = 1'b1;
end 
// dado_leitura[ 17 ]
initial
begin
	dado_leitura[17] = 1'b1;
end 
// dado_leitura[ 16 ]
initial
begin
	dado_leitura[16] = 1'b1;
end 
// dado_leitura[ 15 ]
initial
begin
	dado_leitura[15] = 1'b1;
end 
// dado_leitura[ 14 ]
initial
begin
	dado_leitura[14] = 1'b1;
end 
// dado_leitura[ 13 ]
initial
begin
	dado_leitura[13] = 1'b1;
end 
// dado_leitura[ 12 ]
initial
begin
	dado_leitura[12] = 1'b1;
end 
// dado_leitura[ 11 ]
initial
begin
	dado_leitura[11] = 1'b1;
end 
// dado_leitura[ 10 ]
initial
begin
	dado_leitura[10] = 1'b1;
end 
// dado_leitura[ 9 ]
initial
begin
	dado_leitura[9] = 1'b1;
end 
// dado_leitura[ 8 ]
initial
begin
	dado_leitura[8] = 1'b1;
end 
// dado_leitura[ 7 ]
initial
begin
	dado_leitura[7] = 1'b1;
end 
// dado_leitura[ 6 ]
initial
begin
	dado_leitura[6] = 1'b1;
end 
// dado_leitura[ 5 ]
initial
begin
	dado_leitura[5] = 1'b1;
end 
// dado_leitura[ 4 ]
initial
begin
	dado_leitura[4] = 1'b1;
end 
// dado_leitura[ 3 ]
initial
begin
	dado_leitura[3] = 1'b1;
end 
// dado_leitura[ 2 ]
initial
begin
	dado_leitura[2] = 1'b1;
end 
// dado_leitura[ 1 ]
initial
begin
	dado_leitura[1] = 1'b1;
end 
// dado_leitura[ 0 ]
initial
begin
	dado_leitura[0] = 1'b1;
end 
endmodule

