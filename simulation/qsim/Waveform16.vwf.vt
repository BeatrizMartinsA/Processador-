// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/23/2020 17:40:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_regd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_regd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] Reg2;
reg [4:0] RegD;
reg RegDest;
// wires                                               
wire [4:0] saida;

// assign statements (if any)                          
mux_regd i1 (
// port map - connection between master ports and signals/registers   
	.Reg2(Reg2),
	.RegD(RegD),
	.RegDest(RegDest),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// RegDest
initial
begin
	RegDest = 1'b0;
	RegDest = #100000 1'b1;
	RegDest = #320000 1'b0;
	RegDest = #360000 1'b1;
	RegDest = #200000 1'b0;
end 
// Reg2[ 4 ]
initial
begin
	Reg2[4] = 1'b1;
end 
// Reg2[ 3 ]
initial
begin
	Reg2[3] = 1'b0;
end 
// Reg2[ 2 ]
initial
begin
	Reg2[2] = 1'b1;
end 
// Reg2[ 1 ]
initial
begin
	Reg2[1] = 1'b0;
end 
// Reg2[ 0 ]
initial
begin
	Reg2[0] = 1'b0;
end 
// RegD[ 4 ]
initial
begin
	RegD[4] = 1'b0;
end 
// RegD[ 3 ]
initial
begin
	RegD[3] = 1'b0;
end 
// RegD[ 2 ]
initial
begin
	RegD[2] = 1'b1;
end 
// RegD[ 1 ]
initial
begin
	RegD[1] = 1'b1;
end 
// RegD[ 0 ]
initial
begin
	RegD[0] = 1'b1;
end 
endmodule

