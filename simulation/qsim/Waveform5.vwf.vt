// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2020 01:19:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] ALUop;
reg [4:0] Desloc;
reg clock;
reg [31:0] op1;
reg [31:0] op2;
// wires                                               
wire [31:0] Hi;
wire [31:0] Lo;
wire [31:0] Resultado;
wire Zero;

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.ALUop(ALUop),
	.Desloc(Desloc),
	.Hi(Hi),
	.Lo(Lo),
	.Resultado(Resultado),
	.Zero(Zero),
	.clock(clock),
	.op1(op1),
	.op2(op2)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	repeat(16)
	begin
		clock = 1'b0;
		clock = #30000 1'b1;
		# 30000;
	end
	clock = 1'b0;
	clock = #30000 1'b1;
end 
// ALUop[ 4 ]
initial
begin
	ALUop[4] = 1'b0;
end 
// ALUop[ 3 ]
initial
begin
	ALUop[3] = 1'b0;
	ALUop[3] = #340000 1'b1;
	ALUop[3] = #190000 1'b0;
end 
// ALUop[ 2 ]
initial
begin
	ALUop[2] = 1'b0;
	ALUop[2] = #190000 1'b1;
	ALUop[2] = #150000 1'b0;
	ALUop[2] = #190000 1'b1;
	ALUop[2] = #150000 1'b0;
end 
// ALUop[ 1 ]
initial
begin
	ALUop[1] = 1'b1;
	ALUop[1] = #190000 1'b0;
	ALUop[1] = #150000 1'b1;
	ALUop[1] = #340000 1'b0;
end 
// ALUop[ 0 ]
initial
begin
	ALUop[0] = 1'b0;
	ALUop[0] = #340000 1'b1;
	ALUop[0] = #190000 1'b0;
end 
// Desloc[ 4 ]
initial
begin
	Desloc[4] = 1'b0;
end 
// Desloc[ 3 ]
initial
begin
	Desloc[3] = 1'b0;
end 
// Desloc[ 2 ]
initial
begin
	Desloc[2] = 1'b0;
end 
// Desloc[ 1 ]
initial
begin
	Desloc[1] = 1'b0;
	Desloc[1] = #530000 1'b1;
	Desloc[1] = #150000 1'b0;
end 
// Desloc[ 0 ]
initial
begin
	Desloc[0] = 1'b0;
end 
// op1[ 31 ]
initial
begin
	op1[31] = 1'b0;
end 
// op1[ 30 ]
initial
begin
	op1[30] = 1'b0;
end 
// op1[ 29 ]
initial
begin
	op1[29] = 1'b0;
end 
// op1[ 28 ]
initial
begin
	op1[28] = 1'b0;
end 
// op1[ 27 ]
initial
begin
	op1[27] = 1'b0;
end 
// op1[ 26 ]
initial
begin
	op1[26] = 1'b0;
end 
// op1[ 25 ]
initial
begin
	op1[25] = 1'b0;
end 
// op1[ 24 ]
initial
begin
	op1[24] = 1'b0;
end 
// op1[ 23 ]
initial
begin
	op1[23] = 1'b0;
end 
// op1[ 22 ]
initial
begin
	op1[22] = 1'b0;
end 
// op1[ 21 ]
initial
begin
	op1[21] = 1'b0;
end 
// op1[ 20 ]
initial
begin
	op1[20] = 1'b0;
end 
// op1[ 19 ]
initial
begin
	op1[19] = 1'b0;
end 
// op1[ 18 ]
initial
begin
	op1[18] = 1'b0;
end 
// op1[ 17 ]
initial
begin
	op1[17] = 1'b0;
end 
// op1[ 16 ]
initial
begin
	op1[16] = 1'b0;
end 
// op1[ 15 ]
initial
begin
	op1[15] = 1'b0;
end 
// op1[ 14 ]
initial
begin
	op1[14] = 1'b0;
end 
// op1[ 13 ]
initial
begin
	op1[13] = 1'b0;
end 
// op1[ 12 ]
initial
begin
	op1[12] = 1'b0;
end 
// op1[ 11 ]
initial
begin
	op1[11] = 1'b0;
end 
// op1[ 10 ]
initial
begin
	op1[10] = 1'b0;
end 
// op1[ 9 ]
initial
begin
	op1[9] = 1'b0;
end 
// op1[ 8 ]
initial
begin
	op1[8] = 1'b0;
end 
// op1[ 7 ]
initial
begin
	op1[7] = 1'b0;
end 
// op1[ 6 ]
initial
begin
	op1[6] = 1'b0;
end 
// op1[ 5 ]
initial
begin
	op1[5] = 1'b1;
	op1[5] = #680000 1'b0;
end 
// op1[ 4 ]
initial
begin
	op1[4] = 1'b0;
end 
// op1[ 3 ]
initial
begin
	op1[3] = 1'b0;
end 
// op1[ 2 ]
initial
begin
	op1[2] = 1'b0;
end 
// op1[ 1 ]
initial
begin
	op1[1] = 1'b1;
	op1[1] = #680000 1'b0;
end 
// op1[ 0 ]
initial
begin
	op1[0] = 1'b1;
	op1[0] = #680000 1'b0;
end 
// op2[ 31 ]
initial
begin
	op2[31] = 1'b0;
end 
// op2[ 30 ]
initial
begin
	op2[30] = 1'b0;
end 
// op2[ 29 ]
initial
begin
	op2[29] = 1'b0;
end 
// op2[ 28 ]
initial
begin
	op2[28] = 1'b0;
end 
// op2[ 27 ]
initial
begin
	op2[27] = 1'b0;
end 
// op2[ 26 ]
initial
begin
	op2[26] = 1'b0;
end 
// op2[ 25 ]
initial
begin
	op2[25] = 1'b0;
end 
// op2[ 24 ]
initial
begin
	op2[24] = 1'b0;
end 
// op2[ 23 ]
initial
begin
	op2[23] = 1'b0;
end 
// op2[ 22 ]
initial
begin
	op2[22] = 1'b0;
end 
// op2[ 21 ]
initial
begin
	op2[21] = 1'b0;
end 
// op2[ 20 ]
initial
begin
	op2[20] = 1'b0;
end 
// op2[ 19 ]
initial
begin
	op2[19] = 1'b0;
end 
// op2[ 18 ]
initial
begin
	op2[18] = 1'b0;
end 
// op2[ 17 ]
initial
begin
	op2[17] = 1'b0;
end 
// op2[ 16 ]
initial
begin
	op2[16] = 1'b0;
end 
// op2[ 15 ]
initial
begin
	op2[15] = 1'b0;
end 
// op2[ 14 ]
initial
begin
	op2[14] = 1'b0;
end 
// op2[ 13 ]
initial
begin
	op2[13] = 1'b0;
end 
// op2[ 12 ]
initial
begin
	op2[12] = 1'b0;
end 
// op2[ 11 ]
initial
begin
	op2[11] = 1'b0;
end 
// op2[ 10 ]
initial
begin
	op2[10] = 1'b0;
end 
// op2[ 9 ]
initial
begin
	op2[9] = 1'b0;
end 
// op2[ 8 ]
initial
begin
	op2[8] = 1'b0;
end 
// op2[ 7 ]
initial
begin
	op2[7] = 1'b0;
end 
// op2[ 6 ]
initial
begin
	op2[6] = 1'b0;
end 
// op2[ 5 ]
initial
begin
	op2[5] = 1'b0;
end 
// op2[ 4 ]
initial
begin
	op2[4] = 1'b0;
end 
// op2[ 3 ]
initial
begin
	op2[3] = 1'b0;
end 
// op2[ 2 ]
initial
begin
	op2[2] = 1'b1;
	op2[2] = #680000 1'b0;
end 
// op2[ 1 ]
initial
begin
	op2[1] = 1'b0;
end 
// op2[ 0 ]
initial
begin
	op2[0] = 1'b1;
end 
endmodule

