// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/25/2020 17:15:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          banco_regs
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module banco_regs_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Hi;
reg HiLo;
reg [31:0] Lo;
reg [4:0] Reg1;
reg [4:0] Reg2;
reg [4:0] RegD;
reg RegWrite;
reg clock;
reg [31:0] dado_escrita;
// wires                                               
wire [31:0] dado_leitura1;
wire [31:0] dado_leitura2;

// assign statements (if any)                          
banco_regs i1 (
// port map - connection between master ports and signals/registers   
	.Hi(Hi),
	.HiLo(HiLo),
	.Lo(Lo),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.RegD(RegD),
	.RegWrite(RegWrite),
	.clock(clock),
	.dado_escrita(dado_escrita),
	.dado_leitura1(dado_leitura1),
	.dado_leitura2(dado_leitura2)
);
initial 
begin 
#1000000 $finish;
end 
// Hi[ 31 ]
initial
begin
	Hi[31] = 1'b0;
end 
// Hi[ 30 ]
initial
begin
	Hi[30] = 1'b0;
end 
// Hi[ 29 ]
initial
begin
	Hi[29] = 1'b0;
end 
// Hi[ 28 ]
initial
begin
	Hi[28] = 1'b0;
end 
// Hi[ 27 ]
initial
begin
	Hi[27] = 1'b0;
end 
// Hi[ 26 ]
initial
begin
	Hi[26] = 1'b0;
end 
// Hi[ 25 ]
initial
begin
	Hi[25] = 1'b0;
end 
// Hi[ 24 ]
initial
begin
	Hi[24] = 1'b0;
end 
// Hi[ 23 ]
initial
begin
	Hi[23] = 1'b0;
end 
// Hi[ 22 ]
initial
begin
	Hi[22] = 1'b0;
end 
// Hi[ 21 ]
initial
begin
	Hi[21] = 1'b0;
end 
// Hi[ 20 ]
initial
begin
	Hi[20] = 1'b0;
end 
// Hi[ 19 ]
initial
begin
	Hi[19] = 1'b0;
end 
// Hi[ 18 ]
initial
begin
	Hi[18] = 1'b0;
end 
// Hi[ 17 ]
initial
begin
	Hi[17] = 1'b0;
end 
// Hi[ 16 ]
initial
begin
	Hi[16] = 1'b0;
end 
// Hi[ 15 ]
initial
begin
	Hi[15] = 1'b0;
end 
// Hi[ 14 ]
initial
begin
	Hi[14] = 1'b0;
end 
// Hi[ 13 ]
initial
begin
	Hi[13] = 1'b0;
end 
// Hi[ 12 ]
initial
begin
	Hi[12] = 1'b0;
end 
// Hi[ 11 ]
initial
begin
	Hi[11] = 1'b0;
end 
// Hi[ 10 ]
initial
begin
	Hi[10] = 1'b0;
end 
// Hi[ 9 ]
initial
begin
	Hi[9] = 1'b0;
end 
// Hi[ 8 ]
initial
begin
	Hi[8] = 1'b0;
end 
// Hi[ 7 ]
initial
begin
	Hi[7] = 1'b0;
end 
// Hi[ 6 ]
initial
begin
	Hi[6] = 1'b0;
end 
// Hi[ 5 ]
initial
begin
	Hi[5] = 1'b0;
end 
// Hi[ 4 ]
initial
begin
	Hi[4] = 1'b0;
end 
// Hi[ 3 ]
initial
begin
	Hi[3] = 1'b0;
end 
// Hi[ 2 ]
initial
begin
	Hi[2] = 1'b0;
end 
// Hi[ 1 ]
initial
begin
	Hi[1] = 1'b0;
end 
// Hi[ 0 ]
initial
begin
	Hi[0] = 1'b0;
end 

// HiLo
initial
begin
	HiLo = 1'b0;
end 
// Lo[ 31 ]
initial
begin
	Lo[31] = 1'b0;
end 
// Lo[ 30 ]
initial
begin
	Lo[30] = 1'b0;
end 
// Lo[ 29 ]
initial
begin
	Lo[29] = 1'b0;
end 
// Lo[ 28 ]
initial
begin
	Lo[28] = 1'b0;
end 
// Lo[ 27 ]
initial
begin
	Lo[27] = 1'b0;
end 
// Lo[ 26 ]
initial
begin
	Lo[26] = 1'b0;
end 
// Lo[ 25 ]
initial
begin
	Lo[25] = 1'b0;
end 
// Lo[ 24 ]
initial
begin
	Lo[24] = 1'b0;
end 
// Lo[ 23 ]
initial
begin
	Lo[23] = 1'b0;
end 
// Lo[ 22 ]
initial
begin
	Lo[22] = 1'b0;
end 
// Lo[ 21 ]
initial
begin
	Lo[21] = 1'b0;
end 
// Lo[ 20 ]
initial
begin
	Lo[20] = 1'b0;
end 
// Lo[ 19 ]
initial
begin
	Lo[19] = 1'b0;
end 
// Lo[ 18 ]
initial
begin
	Lo[18] = 1'b0;
end 
// Lo[ 17 ]
initial
begin
	Lo[17] = 1'b0;
end 
// Lo[ 16 ]
initial
begin
	Lo[16] = 1'b0;
end 
// Lo[ 15 ]
initial
begin
	Lo[15] = 1'b0;
end 
// Lo[ 14 ]
initial
begin
	Lo[14] = 1'b0;
end 
// Lo[ 13 ]
initial
begin
	Lo[13] = 1'b0;
end 
// Lo[ 12 ]
initial
begin
	Lo[12] = 1'b0;
end 
// Lo[ 11 ]
initial
begin
	Lo[11] = 1'b0;
end 
// Lo[ 10 ]
initial
begin
	Lo[10] = 1'b0;
end 
// Lo[ 9 ]
initial
begin
	Lo[9] = 1'b0;
end 
// Lo[ 8 ]
initial
begin
	Lo[8] = 1'b0;
end 
// Lo[ 7 ]
initial
begin
	Lo[7] = 1'b0;
end 
// Lo[ 6 ]
initial
begin
	Lo[6] = 1'b0;
end 
// Lo[ 5 ]
initial
begin
	Lo[5] = 1'b0;
end 
// Lo[ 4 ]
initial
begin
	Lo[4] = 1'b0;
end 
// Lo[ 3 ]
initial
begin
	Lo[3] = 1'b0;
end 
// Lo[ 2 ]
initial
begin
	Lo[2] = 1'b0;
end 
// Lo[ 1 ]
initial
begin
	Lo[1] = 1'b0;
end 
// Lo[ 0 ]
initial
begin
	Lo[0] = 1'b0;
end 

// clock
initial
begin
	repeat(8)
	begin
		clock = 1'b0;
		clock = #60000 1'b1;
		# 60000;
	end
	clock = 1'b0;
end 
// dado_escrita[ 31 ]
initial
begin
	dado_escrita[31] = 1'b0;
end 
// dado_escrita[ 30 ]
initial
begin
	dado_escrita[30] = 1'b0;
end 
// dado_escrita[ 29 ]
initial
begin
	dado_escrita[29] = 1'b0;
end 
// dado_escrita[ 28 ]
initial
begin
	dado_escrita[28] = 1'b0;
end 
// dado_escrita[ 27 ]
initial
begin
	dado_escrita[27] = 1'b0;
end 
// dado_escrita[ 26 ]
initial
begin
	dado_escrita[26] = 1'b0;
end 
// dado_escrita[ 25 ]
initial
begin
	dado_escrita[25] = 1'b0;
end 
// dado_escrita[ 24 ]
initial
begin
	dado_escrita[24] = 1'b0;
end 
// dado_escrita[ 23 ]
initial
begin
	dado_escrita[23] = 1'b0;
end 
// dado_escrita[ 22 ]
initial
begin
	dado_escrita[22] = 1'b0;
end 
// dado_escrita[ 21 ]
initial
begin
	dado_escrita[21] = 1'b0;
end 
// dado_escrita[ 20 ]
initial
begin
	dado_escrita[20] = 1'b0;
end 
// dado_escrita[ 19 ]
initial
begin
	dado_escrita[19] = 1'b0;
end 
// dado_escrita[ 18 ]
initial
begin
	dado_escrita[18] = 1'b0;
end 
// dado_escrita[ 17 ]
initial
begin
	dado_escrita[17] = 1'b0;
end 
// dado_escrita[ 16 ]
initial
begin
	dado_escrita[16] = 1'b0;
end 
// dado_escrita[ 15 ]
initial
begin
	dado_escrita[15] = 1'b0;
end 
// dado_escrita[ 14 ]
initial
begin
	dado_escrita[14] = 1'b0;
end 
// dado_escrita[ 13 ]
initial
begin
	dado_escrita[13] = 1'b0;
end 
// dado_escrita[ 12 ]
initial
begin
	dado_escrita[12] = 1'b0;
end 
// dado_escrita[ 11 ]
initial
begin
	dado_escrita[11] = 1'b0;
end 
// dado_escrita[ 10 ]
initial
begin
	dado_escrita[10] = 1'b0;
end 
// dado_escrita[ 9 ]
initial
begin
	dado_escrita[9] = 1'b0;
end 
// dado_escrita[ 8 ]
initial
begin
	dado_escrita[8] = 1'b0;
end 
// dado_escrita[ 7 ]
initial
begin
	dado_escrita[7] = 1'b0;
end 
// dado_escrita[ 6 ]
initial
begin
	dado_escrita[6] = 1'b0;
end 
// dado_escrita[ 5 ]
initial
begin
	dado_escrita[5] = 1'b0;
end 
// dado_escrita[ 4 ]
initial
begin
	dado_escrita[4] = 1'b0;
end 
// dado_escrita[ 3 ]
initial
begin
	dado_escrita[3] = 1'b0;
end 
// dado_escrita[ 2 ]
initial
begin
	dado_escrita[2] = 1'b0;
end 
// dado_escrita[ 1 ]
initial
begin
	dado_escrita[1] = 1'b0;
end 
// dado_escrita[ 0 ]
initial
begin
	dado_escrita[0] = 1'b1;
end 
// Reg2[ 4 ]
initial
begin
	Reg2[4] = 1'b0;
end 
// Reg2[ 3 ]
initial
begin
	Reg2[3] = 1'b0;
end 
// Reg2[ 2 ]
initial
begin
	Reg2[2] = 1'b0;
end 
// Reg2[ 1 ]
initial
begin
	Reg2[1] = 1'b0;
end 
// Reg2[ 0 ]
initial
begin
	Reg2[0] = 1'b1;
end 
// Reg1[ 4 ]
initial
begin
	Reg1[4] = 1'b0;
end 
// Reg1[ 3 ]
initial
begin
	Reg1[3] = 1'b0;
end 
// Reg1[ 2 ]
initial
begin
	Reg1[2] = 1'b0;
end 
// Reg1[ 1 ]
initial
begin
	Reg1[1] = 1'b1;
end 
// Reg1[ 0 ]
initial
begin
	Reg1[0] = 1'b0;
end 
// RegD[ 4 ]
initial
begin
	RegD[4] = 1'b0;
end 
// RegD[ 3 ]
initial
begin
	RegD[3] = 1'b0;
end 
// RegD[ 2 ]
initial
begin
	RegD[2] = 1'b1;
end 
// RegD[ 1 ]
initial
begin
	RegD[1] = 1'b0;
end 
// RegD[ 0 ]
initial
begin
	RegD[0] = 1'b1;
end 
endmodule

