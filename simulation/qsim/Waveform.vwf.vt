// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2020 11:45:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire RegDest;
wire clock_escrita;
wire [31:0] dado2_ula;
wire [31:0] hi;
wire [31:0] leitura1;
wire [31:0] lo;
wire [31:0] saida_md;
wire [31:0] saida_mux_branch;
wire [31:0] saida_mux_escrita;
wire [31:0] saida_mux_jump;
wire [25:0] saida_mux_jumpreg;
wire [4:0] saida_mux_regd;
wire [31:0] saida_pc;
wire [31:0] saida_ula;

// assign statements (if any)                          
processador i1 (
// port map - connection between master ports and signals/registers   
	.RegDest(RegDest),
	.clock(clock),
	.clock_escrita(clock_escrita),
	.dado2_ula(dado2_ula),
	.hi(hi),
	.leitura1(leitura1),
	.lo(lo),
	.saida_md(saida_md),
	.saida_mux_branch(saida_mux_branch),
	.saida_mux_escrita(saida_mux_escrita),
	.saida_mux_jump(saida_mux_jump),
	.saida_mux_jumpreg(saida_mux_jumpreg),
	.saida_mux_regd(saida_mux_regd),
	.saida_pc(saida_pc),
	.saida_ula(saida_ula)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	repeat(166)
	begin
		clock = 1'b0;
		clock = #3000 1'b1;
		# 3000;
	end
	clock = 1'b0;
	clock = #3000 1'b1;
end 
endmodule

