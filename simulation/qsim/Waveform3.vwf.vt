// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2020 01:06:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mem_dados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mem_dados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg MemRead;
reg MemWrite;
reg clock;
reg clock_write;
reg [31:0] dado_escrita;
reg [31:0] endereco;
// wires                                               
wire [31:0] dado_leitura;

// assign statements (if any)                          
mem_dados i1 (
// port map - connection between master ports and signals/registers   
	.MemRead(MemRead),
	.MemWrite(MemWrite),
	.clock(clock),
	.clock_write(clock_write),
	.dado_escrita(dado_escrita),
	.dado_leitura(dado_leitura),
	.endereco(endereco)
);
initial 
begin 
#1000000 $finish;
end 

// MemRead
initial
begin
	MemRead = 1'b0;
	MemRead = #520000 1'b1;
end 

// MemWrite
initial
begin
	MemWrite = 1'b1;
	MemWrite = #290000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// clock_write
initial
begin
	repeat(8)
	begin
		clock_write = 1'b0;
		clock_write = #60000 1'b1;
		# 60000;
	end
	clock_write = 1'b0;
end 
// dado_escrita[ 31 ]
initial
begin
	dado_escrita[31] = 1'b0;
end 
// dado_escrita[ 30 ]
initial
begin
	dado_escrita[30] = 1'b0;
end 
// dado_escrita[ 29 ]
initial
begin
	dado_escrita[29] = 1'b0;
end 
// dado_escrita[ 28 ]
initial
begin
	dado_escrita[28] = 1'b0;
end 
// dado_escrita[ 27 ]
initial
begin
	dado_escrita[27] = 1'b0;
end 
// dado_escrita[ 26 ]
initial
begin
	dado_escrita[26] = 1'b0;
end 
// dado_escrita[ 25 ]
initial
begin
	dado_escrita[25] = 1'b0;
end 
// dado_escrita[ 24 ]
initial
begin
	dado_escrita[24] = 1'b0;
end 
// dado_escrita[ 23 ]
initial
begin
	dado_escrita[23] = 1'b0;
end 
// dado_escrita[ 22 ]
initial
begin
	dado_escrita[22] = 1'b0;
end 
// dado_escrita[ 21 ]
initial
begin
	dado_escrita[21] = 1'b0;
end 
// dado_escrita[ 20 ]
initial
begin
	dado_escrita[20] = 1'b0;
end 
// dado_escrita[ 19 ]
initial
begin
	dado_escrita[19] = 1'b0;
end 
// dado_escrita[ 18 ]
initial
begin
	dado_escrita[18] = 1'b0;
end 
// dado_escrita[ 17 ]
initial
begin
	dado_escrita[17] = 1'b0;
end 
// dado_escrita[ 16 ]
initial
begin
	dado_escrita[16] = 1'b0;
end 
// dado_escrita[ 15 ]
initial
begin
	dado_escrita[15] = 1'b0;
end 
// dado_escrita[ 14 ]
initial
begin
	dado_escrita[14] = 1'b0;
end 
// dado_escrita[ 13 ]
initial
begin
	dado_escrita[13] = 1'b0;
end 
// dado_escrita[ 12 ]
initial
begin
	dado_escrita[12] = 1'b0;
end 
// dado_escrita[ 11 ]
initial
begin
	dado_escrita[11] = 1'b0;
end 
// dado_escrita[ 10 ]
initial
begin
	dado_escrita[10] = 1'b0;
end 
// dado_escrita[ 9 ]
initial
begin
	dado_escrita[9] = 1'b0;
end 
// dado_escrita[ 8 ]
initial
begin
	dado_escrita[8] = 1'b0;
end 
// dado_escrita[ 7 ]
initial
begin
	dado_escrita[7] = 1'b0;
	dado_escrita[7] = #180000 1'b1;
	dado_escrita[7] = #120000 1'b0;
end 
// dado_escrita[ 6 ]
initial
begin
	dado_escrita[6] = 1'b0;
	dado_escrita[6] = #180000 1'b1;
	dado_escrita[6] = #120000 1'b0;
end 
// dado_escrita[ 5 ]
initial
begin
	dado_escrita[5] = 1'b0;
	dado_escrita[5] = #180000 1'b1;
	dado_escrita[5] = #120000 1'b0;
end 
// dado_escrita[ 4 ]
initial
begin
	dado_escrita[4] = 1'b0;
	dado_escrita[4] = #180000 1'b1;
	dado_escrita[4] = #120000 1'b0;
end 
// dado_escrita[ 3 ]
initial
begin
	dado_escrita[3] = 1'b1;
	dado_escrita[3] = #300000 1'b0;
end 
// dado_escrita[ 2 ]
initial
begin
	dado_escrita[2] = 1'b0;
	dado_escrita[2] = #180000 1'b1;
	dado_escrita[2] = #120000 1'b0;
end 
// dado_escrita[ 1 ]
initial
begin
	dado_escrita[1] = 1'b1;
	dado_escrita[1] = #300000 1'b0;
end 
// dado_escrita[ 0 ]
initial
begin
	dado_escrita[0] = 1'b0;
	dado_escrita[0] = #180000 1'b1;
	dado_escrita[0] = #120000 1'b0;
end 
// endereco[ 31 ]
initial
begin
	endereco[31] = 1'b0;
end 
// endereco[ 30 ]
initial
begin
	endereco[30] = 1'b0;
end 
// endereco[ 29 ]
initial
begin
	endereco[29] = 1'b0;
end 
// endereco[ 28 ]
initial
begin
	endereco[28] = 1'b0;
end 
// endereco[ 27 ]
initial
begin
	endereco[27] = 1'b0;
end 
// endereco[ 26 ]
initial
begin
	endereco[26] = 1'b0;
end 
// endereco[ 25 ]
initial
begin
	endereco[25] = 1'b0;
end 
// endereco[ 24 ]
initial
begin
	endereco[24] = 1'b0;
end 
// endereco[ 23 ]
initial
begin
	endereco[23] = 1'b0;
end 
// endereco[ 22 ]
initial
begin
	endereco[22] = 1'b0;
end 
// endereco[ 21 ]
initial
begin
	endereco[21] = 1'b0;
end 
// endereco[ 20 ]
initial
begin
	endereco[20] = 1'b0;
end 
// endereco[ 19 ]
initial
begin
	endereco[19] = 1'b0;
end 
// endereco[ 18 ]
initial
begin
	endereco[18] = 1'b0;
end 
// endereco[ 17 ]
initial
begin
	endereco[17] = 1'b0;
end 
// endereco[ 16 ]
initial
begin
	endereco[16] = 1'b0;
end 
// endereco[ 15 ]
initial
begin
	endereco[15] = 1'b0;
end 
// endereco[ 14 ]
initial
begin
	endereco[14] = 1'b0;
end 
// endereco[ 13 ]
initial
begin
	endereco[13] = 1'b0;
end 
// endereco[ 12 ]
initial
begin
	endereco[12] = 1'b0;
end 
// endereco[ 11 ]
initial
begin
	endereco[11] = 1'b0;
end 
// endereco[ 10 ]
initial
begin
	endereco[10] = 1'b0;
end 
// endereco[ 9 ]
initial
begin
	endereco[9] = 1'b0;
end 
// endereco[ 8 ]
initial
begin
	endereco[8] = 1'b0;
end 
// endereco[ 7 ]
initial
begin
	endereco[7] = 1'b0;
end 
// endereco[ 6 ]
initial
begin
	endereco[6] = 1'b0;
end 
// endereco[ 5 ]
initial
begin
	endereco[5] = 1'b0;
end 
// endereco[ 4 ]
initial
begin
	endereco[4] = 1'b0;
end 
// endereco[ 3 ]
initial
begin
	endereco[3] = 1'b0;
end 
// endereco[ 2 ]
initial
begin
	endereco[2] = 1'b0;
end 
// endereco[ 1 ]
initial
begin
	endereco[1] = 1'b1;
	endereco[1] = #300000 1'b0;
	endereco[1] = #230000 1'b1;
	endereco[1] = #430000 1'b0;
end 
// endereco[ 0 ]
initial
begin
	endereco[0] = 1'b1;
	endereco[0] = #180000 1'b0;
	endereco[0] = #570000 1'b1;
	endereco[0] = #210000 1'b0;
end 
endmodule

