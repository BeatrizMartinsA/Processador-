// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/23/2020 17:18:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_jumpreg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_jumpreg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg JumpReg;
reg [31:0] dado_leitura1;
reg [25:0] i25_0;
// wires                                               
wire [25:0] saida;

// assign statements (if any)                          
mux_jumpreg i1 (
// port map - connection between master ports and signals/registers   
	.JumpReg(JumpReg),
	.dado_leitura1(dado_leitura1),
	.i25_0(i25_0),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// JumpReg
initial
begin
	JumpReg = 1'b0;
	JumpReg = #280000 1'b1;
	JumpReg = #460000 1'b0;
end 
// dado_leitura1[ 31 ]
initial
begin
	dado_leitura1[31] = 1'b1;
end 
// dado_leitura1[ 30 ]
initial
begin
	dado_leitura1[30] = 1'b1;
end 
// dado_leitura1[ 29 ]
initial
begin
	dado_leitura1[29] = 1'b1;
end 
// dado_leitura1[ 28 ]
initial
begin
	dado_leitura1[28] = 1'b1;
end 
// dado_leitura1[ 27 ]
initial
begin
	dado_leitura1[27] = 1'b1;
end 
// dado_leitura1[ 26 ]
initial
begin
	dado_leitura1[26] = 1'b1;
end 
// dado_leitura1[ 25 ]
initial
begin
	dado_leitura1[25] = 1'b0;
end 
// dado_leitura1[ 24 ]
initial
begin
	dado_leitura1[24] = 1'b0;
end 
// dado_leitura1[ 23 ]
initial
begin
	dado_leitura1[23] = 1'b0;
end 
// dado_leitura1[ 22 ]
initial
begin
	dado_leitura1[22] = 1'b0;
end 
// dado_leitura1[ 21 ]
initial
begin
	dado_leitura1[21] = 1'b0;
end 
// dado_leitura1[ 20 ]
initial
begin
	dado_leitura1[20] = 1'b0;
end 
// dado_leitura1[ 19 ]
initial
begin
	dado_leitura1[19] = 1'b0;
end 
// dado_leitura1[ 18 ]
initial
begin
	dado_leitura1[18] = 1'b0;
end 
// dado_leitura1[ 17 ]
initial
begin
	dado_leitura1[17] = 1'b0;
end 
// dado_leitura1[ 16 ]
initial
begin
	dado_leitura1[16] = 1'b0;
end 
// dado_leitura1[ 15 ]
initial
begin
	dado_leitura1[15] = 1'b0;
end 
// dado_leitura1[ 14 ]
initial
begin
	dado_leitura1[14] = 1'b0;
end 
// dado_leitura1[ 13 ]
initial
begin
	dado_leitura1[13] = 1'b0;
end 
// dado_leitura1[ 12 ]
initial
begin
	dado_leitura1[12] = 1'b0;
end 
// dado_leitura1[ 11 ]
initial
begin
	dado_leitura1[11] = 1'b0;
end 
// dado_leitura1[ 10 ]
initial
begin
	dado_leitura1[10] = 1'b0;
end 
// dado_leitura1[ 9 ]
initial
begin
	dado_leitura1[9] = 1'b0;
end 
// dado_leitura1[ 8 ]
initial
begin
	dado_leitura1[8] = 1'b0;
end 
// dado_leitura1[ 7 ]
initial
begin
	dado_leitura1[7] = 1'b0;
end 
// dado_leitura1[ 6 ]
initial
begin
	dado_leitura1[6] = 1'b0;
end 
// dado_leitura1[ 5 ]
initial
begin
	dado_leitura1[5] = 1'b0;
end 
// dado_leitura1[ 4 ]
initial
begin
	dado_leitura1[4] = 1'b0;
end 
// dado_leitura1[ 3 ]
initial
begin
	dado_leitura1[3] = 1'b0;
end 
// dado_leitura1[ 2 ]
initial
begin
	dado_leitura1[2] = 1'b0;
end 
// dado_leitura1[ 1 ]
initial
begin
	dado_leitura1[1] = 1'b0;
end 
// dado_leitura1[ 0 ]
initial
begin
	dado_leitura1[0] = 1'b0;
end 
// i25_0[ 25 ]
initial
begin
	i25_0[25] = 1'b0;
end 
// i25_0[ 24 ]
initial
begin
	i25_0[24] = 1'b0;
end 
// i25_0[ 23 ]
initial
begin
	i25_0[23] = 1'b0;
end 
// i25_0[ 22 ]
initial
begin
	i25_0[22] = 1'b0;
end 
// i25_0[ 21 ]
initial
begin
	i25_0[21] = 1'b0;
end 
// i25_0[ 20 ]
initial
begin
	i25_0[20] = 1'b0;
end 
// i25_0[ 19 ]
initial
begin
	i25_0[19] = 1'b0;
end 
// i25_0[ 18 ]
initial
begin
	i25_0[18] = 1'b0;
end 
// i25_0[ 17 ]
initial
begin
	i25_0[17] = 1'b0;
end 
// i25_0[ 16 ]
initial
begin
	i25_0[16] = 1'b0;
end 
// i25_0[ 15 ]
initial
begin
	i25_0[15] = 1'b0;
end 
// i25_0[ 14 ]
initial
begin
	i25_0[14] = 1'b0;
end 
// i25_0[ 13 ]
initial
begin
	i25_0[13] = 1'b0;
end 
// i25_0[ 12 ]
initial
begin
	i25_0[12] = 1'b0;
end 
// i25_0[ 11 ]
initial
begin
	i25_0[11] = 1'b0;
end 
// i25_0[ 10 ]
initial
begin
	i25_0[10] = 1'b0;
end 
// i25_0[ 9 ]
initial
begin
	i25_0[9] = 1'b0;
end 
// i25_0[ 8 ]
initial
begin
	i25_0[8] = 1'b0;
end 
// i25_0[ 7 ]
initial
begin
	i25_0[7] = 1'b0;
end 
// i25_0[ 6 ]
initial
begin
	i25_0[6] = 1'b0;
end 
// i25_0[ 5 ]
initial
begin
	i25_0[5] = 1'b0;
end 
// i25_0[ 4 ]
initial
begin
	i25_0[4] = 1'b0;
end 
// i25_0[ 3 ]
initial
begin
	i25_0[3] = 1'b0;
end 
// i25_0[ 2 ]
initial
begin
	i25_0[2] = 1'b1;
end 
// i25_0[ 1 ]
initial
begin
	i25_0[1] = 1'b0;
end 
// i25_0[ 0 ]
initial
begin
	i25_0[0] = 1'b0;
end 
endmodule

