// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2020 01:11:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          banco_regs
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module banco_regs_vlg_vec_tst();
// constants                                           
// general purpose registers
reg JAL;
reg [4:0] Reg1;
reg [4:0] Reg2;
reg [4:0] RegD;
reg RegWrite;
reg clock;
reg [31:0] dado_escrita;
reg [31:0] pc_plus_1;
// wires                                               
wire [31:0] dado_leitura1;
wire [31:0] dado_leitura2;

// assign statements (if any)                          
banco_regs i1 (
// port map - connection between master ports and signals/registers   
	.JAL(JAL),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.RegD(RegD),
	.RegWrite(RegWrite),
	.clock(clock),
	.dado_escrita(dado_escrita),
	.dado_leitura1(dado_leitura1),
	.dado_leitura2(dado_leitura2),
	.pc_plus_1(pc_plus_1)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	repeat(8)
	begin
		clock = 1'b0;
		clock = #60000 1'b1;
		# 60000;
	end
	clock = 1'b0;
end 

// JAL
initial
begin
	JAL = 1'b0;
	JAL = #650000 1'b1;
	JAL = #150000 1'b0;
end 

// RegWrite
initial
begin
	RegWrite = 1'b1;
	RegWrite = #400000 1'b0;
end 
// Reg1[ 4 ]
initial
begin
	Reg1[4] = 1'b0;
	Reg1[4] = #760000 1'b1;
end 
// Reg1[ 3 ]
initial
begin
	Reg1[3] = 1'b0;
	Reg1[3] = #760000 1'b1;
end 
// Reg1[ 2 ]
initial
begin
	Reg1[2] = 1'b0;
	Reg1[2] = #400000 1'b1;
	Reg1[2] = #290000 1'b0;
	Reg1[2] = #70000 1'b1;
end 
// Reg1[ 1 ]
initial
begin
	Reg1[1] = 1'b0;
	Reg1[1] = #400000 1'b1;
	Reg1[1] = #290000 1'b0;
	Reg1[1] = #70000 1'b1;
end 
// Reg1[ 0 ]
initial
begin
	Reg1[0] = 1'b0;
	Reg1[0] = #400000 1'b1;
	Reg1[0] = #290000 1'b0;
	Reg1[0] = #70000 1'b1;
end 
// Reg2[ 4 ]
initial
begin
	Reg2[4] = 1'b0;
end 
// Reg2[ 3 ]
initial
begin
	Reg2[3] = 1'b0;
end 
// Reg2[ 2 ]
initial
begin
	Reg2[2] = 1'b0;
	Reg2[2] = #400000 1'b1;
	Reg2[2] = #290000 1'b0;
end 
// Reg2[ 1 ]
initial
begin
	Reg2[1] = 1'b0;
end 
// Reg2[ 0 ]
initial
begin
	Reg2[0] = 1'b0;
end 
// RegD[ 4 ]
initial
begin
	RegD[4] = 1'b0;
end 
// RegD[ 3 ]
initial
begin
	RegD[3] = 1'b0;
end 
// RegD[ 2 ]
initial
begin
	RegD[2] = 1'b1;
	RegD[2] = #400000 1'b0;
end 
// RegD[ 1 ]
initial
begin
	RegD[1] = 1'b0;
	RegD[1] = #160000 1'b1;
	RegD[1] = #240000 1'b0;
end 
// RegD[ 0 ]
initial
begin
	RegD[0] = 1'b0;
	RegD[0] = #160000 1'b1;
	RegD[0] = #240000 1'b0;
end 
// dado_escrita[ 31 ]
initial
begin
	dado_escrita[31] = 1'b0;
	dado_escrita[31] = #160000 1'b1;
	dado_escrita[31] = #240000 1'b0;
end 
// dado_escrita[ 30 ]
initial
begin
	dado_escrita[30] = 1'b0;
	dado_escrita[30] = #160000 1'b1;
	dado_escrita[30] = #240000 1'b0;
end 
// dado_escrita[ 29 ]
initial
begin
	dado_escrita[29] = 1'b0;
	dado_escrita[29] = #160000 1'b1;
	dado_escrita[29] = #240000 1'b0;
end 
// dado_escrita[ 28 ]
initial
begin
	dado_escrita[28] = 1'b0;
	dado_escrita[28] = #160000 1'b1;
	dado_escrita[28] = #240000 1'b0;
end 
// dado_escrita[ 27 ]
initial
begin
	dado_escrita[27] = 1'b0;
	dado_escrita[27] = #160000 1'b1;
	dado_escrita[27] = #240000 1'b0;
end 
// dado_escrita[ 26 ]
initial
begin
	dado_escrita[26] = 1'b0;
	dado_escrita[26] = #160000 1'b1;
	dado_escrita[26] = #240000 1'b0;
end 
// dado_escrita[ 25 ]
initial
begin
	dado_escrita[25] = 1'b0;
	dado_escrita[25] = #160000 1'b1;
	dado_escrita[25] = #240000 1'b0;
end 
// dado_escrita[ 24 ]
initial
begin
	dado_escrita[24] = 1'b0;
	dado_escrita[24] = #160000 1'b1;
	dado_escrita[24] = #240000 1'b0;
end 
// dado_escrita[ 23 ]
initial
begin
	dado_escrita[23] = 1'b0;
	dado_escrita[23] = #160000 1'b1;
	dado_escrita[23] = #240000 1'b0;
end 
// dado_escrita[ 22 ]
initial
begin
	dado_escrita[22] = 1'b0;
	dado_escrita[22] = #160000 1'b1;
	dado_escrita[22] = #240000 1'b0;
end 
// dado_escrita[ 21 ]
initial
begin
	dado_escrita[21] = 1'b0;
	dado_escrita[21] = #160000 1'b1;
	dado_escrita[21] = #240000 1'b0;
end 
// dado_escrita[ 20 ]
initial
begin
	dado_escrita[20] = 1'b0;
	dado_escrita[20] = #160000 1'b1;
	dado_escrita[20] = #240000 1'b0;
end 
// dado_escrita[ 19 ]
initial
begin
	dado_escrita[19] = 1'b0;
	dado_escrita[19] = #160000 1'b1;
	dado_escrita[19] = #240000 1'b0;
end 
// dado_escrita[ 18 ]
initial
begin
	dado_escrita[18] = 1'b0;
	dado_escrita[18] = #160000 1'b1;
	dado_escrita[18] = #240000 1'b0;
end 
// dado_escrita[ 17 ]
initial
begin
	dado_escrita[17] = 1'b0;
	dado_escrita[17] = #160000 1'b1;
	dado_escrita[17] = #240000 1'b0;
end 
// dado_escrita[ 16 ]
initial
begin
	dado_escrita[16] = 1'b0;
	dado_escrita[16] = #160000 1'b1;
	dado_escrita[16] = #240000 1'b0;
end 
// dado_escrita[ 15 ]
initial
begin
	dado_escrita[15] = 1'b0;
	dado_escrita[15] = #160000 1'b1;
	dado_escrita[15] = #240000 1'b0;
end 
// dado_escrita[ 14 ]
initial
begin
	dado_escrita[14] = 1'b0;
	dado_escrita[14] = #160000 1'b1;
	dado_escrita[14] = #240000 1'b0;
end 
// dado_escrita[ 13 ]
initial
begin
	dado_escrita[13] = 1'b0;
	dado_escrita[13] = #160000 1'b1;
	dado_escrita[13] = #240000 1'b0;
end 
// dado_escrita[ 12 ]
initial
begin
	dado_escrita[12] = 1'b0;
	dado_escrita[12] = #160000 1'b1;
	dado_escrita[12] = #240000 1'b0;
end 
// dado_escrita[ 11 ]
initial
begin
	dado_escrita[11] = 1'b0;
	dado_escrita[11] = #160000 1'b1;
	dado_escrita[11] = #240000 1'b0;
end 
// dado_escrita[ 10 ]
initial
begin
	dado_escrita[10] = 1'b0;
	dado_escrita[10] = #160000 1'b1;
	dado_escrita[10] = #240000 1'b0;
end 
// dado_escrita[ 9 ]
initial
begin
	dado_escrita[9] = 1'b0;
	dado_escrita[9] = #160000 1'b1;
	dado_escrita[9] = #240000 1'b0;
end 
// dado_escrita[ 8 ]
initial
begin
	dado_escrita[8] = 1'b0;
	dado_escrita[8] = #160000 1'b1;
	dado_escrita[8] = #240000 1'b0;
end 
// dado_escrita[ 7 ]
initial
begin
	dado_escrita[7] = 1'b0;
	dado_escrita[7] = #160000 1'b1;
	dado_escrita[7] = #240000 1'b0;
end 
// dado_escrita[ 6 ]
initial
begin
	dado_escrita[6] = 1'b1;
	dado_escrita[6] = #400000 1'b0;
end 
// dado_escrita[ 5 ]
initial
begin
	dado_escrita[5] = 1'b1;
	dado_escrita[5] = #400000 1'b0;
end 
// dado_escrita[ 4 ]
initial
begin
	dado_escrita[4] = 1'b0;
end 
// dado_escrita[ 3 ]
initial
begin
	dado_escrita[3] = 1'b0;
	dado_escrita[3] = #160000 1'b1;
	dado_escrita[3] = #240000 1'b0;
end 
// dado_escrita[ 2 ]
initial
begin
	dado_escrita[2] = 1'b1;
	dado_escrita[2] = #400000 1'b0;
end 
// dado_escrita[ 1 ]
initial
begin
	dado_escrita[1] = 1'b0;
end 
// dado_escrita[ 0 ]
initial
begin
	dado_escrita[0] = 1'b0;
end 
// pc_plus_1[ 31 ]
initial
begin
	pc_plus_1[31] = 1'b0;
end 
// pc_plus_1[ 30 ]
initial
begin
	pc_plus_1[30] = 1'b0;
end 
// pc_plus_1[ 29 ]
initial
begin
	pc_plus_1[29] = 1'b0;
end 
// pc_plus_1[ 28 ]
initial
begin
	pc_plus_1[28] = 1'b0;
end 
// pc_plus_1[ 27 ]
initial
begin
	pc_plus_1[27] = 1'b0;
end 
// pc_plus_1[ 26 ]
initial
begin
	pc_plus_1[26] = 1'b0;
end 
// pc_plus_1[ 25 ]
initial
begin
	pc_plus_1[25] = 1'b0;
end 
// pc_plus_1[ 24 ]
initial
begin
	pc_plus_1[24] = 1'b0;
end 
// pc_plus_1[ 23 ]
initial
begin
	pc_plus_1[23] = 1'b0;
end 
// pc_plus_1[ 22 ]
initial
begin
	pc_plus_1[22] = 1'b0;
end 
// pc_plus_1[ 21 ]
initial
begin
	pc_plus_1[21] = 1'b0;
end 
// pc_plus_1[ 20 ]
initial
begin
	pc_plus_1[20] = 1'b0;
end 
// pc_plus_1[ 19 ]
initial
begin
	pc_plus_1[19] = 1'b0;
end 
// pc_plus_1[ 18 ]
initial
begin
	pc_plus_1[18] = 1'b0;
end 
// pc_plus_1[ 17 ]
initial
begin
	pc_plus_1[17] = 1'b0;
end 
// pc_plus_1[ 16 ]
initial
begin
	pc_plus_1[16] = 1'b0;
end 
// pc_plus_1[ 15 ]
initial
begin
	pc_plus_1[15] = 1'b0;
end 
// pc_plus_1[ 14 ]
initial
begin
	pc_plus_1[14] = 1'b0;
end 
// pc_plus_1[ 13 ]
initial
begin
	pc_plus_1[13] = 1'b0;
end 
// pc_plus_1[ 12 ]
initial
begin
	pc_plus_1[12] = 1'b0;
end 
// pc_plus_1[ 11 ]
initial
begin
	pc_plus_1[11] = 1'b0;
end 
// pc_plus_1[ 10 ]
initial
begin
	pc_plus_1[10] = 1'b0;
end 
// pc_plus_1[ 9 ]
initial
begin
	pc_plus_1[9] = 1'b0;
end 
// pc_plus_1[ 8 ]
initial
begin
	pc_plus_1[8] = 1'b0;
end 
// pc_plus_1[ 7 ]
initial
begin
	pc_plus_1[7] = 1'b0;
end 
// pc_plus_1[ 6 ]
initial
begin
	pc_plus_1[6] = 1'b0;
end 
// pc_plus_1[ 5 ]
initial
begin
	pc_plus_1[5] = 1'b0;
end 
// pc_plus_1[ 4 ]
initial
begin
	pc_plus_1[4] = 1'b0;
end 
// pc_plus_1[ 3 ]
initial
begin
	pc_plus_1[3] = 1'b0;
end 
// pc_plus_1[ 2 ]
initial
begin
	pc_plus_1[2] = 1'b1;
end 
// pc_plus_1[ 1 ]
initial
begin
	pc_plus_1[1] = 1'b0;
end 
// pc_plus_1[ 0 ]
initial
begin
	pc_plus_1[0] = 1'b1;
end 
endmodule

